import cv2
import face_recognition
import sqlite3
import datetime

# Database setup
def setup_database():
    conn = sqlite3.connect("attendance.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS Attendance (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            date TEXT,
            time TEXT
        )
    """)
    conn.commit()
    conn.close()

# Mark attendance
def mark_attendance(name):
    conn = sqlite3.connect("attendance.db")
    cursor = conn.cursor()
    date = datetime.datetime.now().strftime("%Y-%m-%d")
    time = datetime.datetime.now().strftime("%H:%M:%S")
    cursor.execute("INSERT INTO Attendance (name, date, time) VALUES (?, ?, ?)", (name, date, time))
    conn.commit()
    conn.close()

# Load known faces and names
def load_known_faces():
    known_faces = []
    known_names = []
    
    # Add your known images and names
    image_paths = ["person1.jpg", "person2.jpg"]  # Example: Images of known people
    names = ["Navreet", "Harleen"]  # Corresponding names
    
    for path, name in zip(image_paths, names):
        image = face_recognition.load_image_file(path)
        encoding = face_recognition.face_encodings(image)[0]
        known_faces.append(encoding)
        known_names.append(name)
    
    return known_faces, known_names

# Main function
def attendance_system():
    setup_database()
    
    # Load known faces
    known_faces, known_names = load_known_faces()

    # Start video capture
    video_capture = cv2.VideoCapture(0)

    while True:
        ret, frame = video_capture.read()
        if not ret:
            break
        
        # Resize frame for faster processing
        small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
        rgb_frame = small_frame[:, :, ::-1]  # Convert BGR to RGB
        
        # Find all face locations and encodings
        face_locations = face_recognition.face_locations(rgb_frame)
        face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)
        
        for face_encoding, face_location in zip(face_encodings, face_locations):
            # Match the face to known faces
            matches = face_recognition.compare_faces(known_faces, face_encoding)
            name = "Unknown"
            
            # If a match is found
            if True in matches:
                first_match_index = matches.index(True)
                name = known_names[first_match_index]
                
                # Mark attendance
                mark_attendance(name)
            
            # Draw a rectangle around the face and display the name
            top, right, bottom, left = [v * 4 for v in face_location]
            cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
            cv2.putText(frame, name, (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.75, (0, 255, 0), 2)
        
        # Display the video feed
        cv2.imshow("Attendance System", frame)
        
        # Exit with 'q' key
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    
    # Release the video capture
    video_capture.release()
    cv2.destroyAllWindows()

# Run the attendance system
attendance_system()
